var auth="object"==typeof auth?auth:{};auth={sesh_check:()=>new Promise((o,e)=>{$.ajax({url:"/.netlify/functions/at_auth",dataType:"json"}).done(function(e){e.length>0&&o(e)}).fail(function(o,l,t){e(o,l,t)})}),input_validation:()=>{$("body").on("input change",".auth_form input",function(){var o=$(this)[0],e=$(this).val(),l=$(this).closest("form"),t=!1,a=!1;if(o.setCustomValidity(""),"email"===$(this).attr("type")){let{valid_eml:l}=utils.validate_email(e);l?o.setCustomValidity(""):o.setCustomValidity("Gonna need a valid email there, chief.")}if("password"===$(this).attr("type")){let{valid_pw:t,valid_pw_length:a,valid_pw_length_msg:n,valid_ltrCases:s,valid_ltrCases_msg:i,valid_pw_spcChar:r,valid_pw_spcChar_msg:d}=utils.validate_pw(e);t&&o.setCustomValidity("");let c="";a?$(l).find(".validHelp_minLength").removeClass("invalid").addClass("valid"):($(l).find(".validHelp_minLength").removeClass("valid").addClass("invalid"),c+=n),s?$(l).find(".validHelp_ltrCases").removeClass("invalid").addClass("valid"):($(l).find(".validHelp_ltrCases").removeClass("valid").addClass("invalid"),c+=i),r?$(l).find(".validHelp_spcChar").removeClass("invalid").addClass("valid"):($(l).find(".validHelp_spcChar").removeClass("valid").addClass("invalid"),c+=d),o.setCustomValidity(c)}o.checkValidity()||(console.log("Fld invalid. fld_el.validationMessage: "),console.log(o.validationMessage)),""!==$.trim(l.find("input[type=email]").val())&&""!==$.trim(l.find("input[type=password]").val())&&(t=!0),l.find("input[type=email]").is(":valid")&&l.find("input[type=password]").is(":valid")&&(a=!0),t&&a?(!0,$("#auth_login_do").attr("disabled",!1)):(!1,$("#auth_login_do").attr("disabled",!0))})},show_login_modal:()=>{$.get("components/_auth_login.html",function(o){$("body").append(o),$("#auth_login_modal").on("show.bs.modal",function(){$("#auth_login input").off("keypress"),$("#auth_login input").keypress(function(o){13===o.which&&($("#auth_login_do").attr("disabled",!0),auth.login_do())}),$("#auth_login_do").off("click"),$("#auth_login_do").on("click",function(o){o.preventDefault(),$("#auth_login_do").attr("disabled",!0),auth.login_do()})}),$("#auth_login_modal").on("shown.bs.modal",function(){auth.input_validation(),setTimeout(function(){$(".auth_form input").trigger("change")},500),""===$.trim($("#auth_login").find("input[type=email]").val())&&""===$.trim($("#auth_login").find("input[type=password]").val())&&$("#auth_login_email").focus()}),$("#auth_login_modal").on("hidden.bs.modal",function(){$("#auth_login_modal").modal("dispose"),$("#auth_login_modal").remove()}),$("#auth_login_modal").modal({backdrop:"static"}),$("#auth_login_modal").modal("show")})},auth_do:o=>{var e;switch(console.log(l),o){case"auth_pw_set":e="auth_pw_set";break;case"auth_login":e="auth_login"}var l={auth_task:e};$.each($("#"+o+" input"),function(o,e){var t=$(e).attr("data-authfld"),a=$(e).val();l[t]=a}),console.log(l);var t=JSON.stringify(l);$.ajax({url:"/.netlify/functions/at_auth",type:"POST",contentType:"application/json",data:t,success:function(){window.location.reload(!0)},error:function(o,e,l){var t;if(console.log("error event"),console.log("jqXHR: "),console.log(o),console.log("textStatus: "),console.log(e),console.log("errorThrown: "),console.log(l),void 0!==o.responseJSON){let e=o.responseJSON.statusCode;t=e+"\n"+o.responseJSON.error+"\n"+o.responseJSON.message,401===e&&console.log("Communicate the specific authentication problem to user")}else t=o.responseText;console.error("Error:\n"+t)},complete:function(){console.log("complete event")}})},pw_set_do:()=>{var o={task:"pw_set"};$.each($("#auth_pw_set input"),function(e,l){var t=$(l).attr("id"),a=$(l).val();o[t]=a}),console.log(o);var e=JSON.stringify(o);$.ajax({url:"/.netlify/functions/at_auth",type:"POST",contentType:"application/json",data:e,success:function(o,e,l){console.log("success event"),console.log("resp: "),console.log(o),console.log("textStatus: "),console.log(e),console.log("jqXhr: "),console.log(l)},error:function(o,e,l){var t;if(console.log("error event"),console.log("jqXHR: "),console.log(o),console.log("textStatus: "),console.log(e),console.log("errorThrown: "),console.log(l),void 0!==o.responseJSON){t=o.responseJSON.statusCode+"\n"+o.responseJSON.error+"\n"+o.responseJSON.message}else t=o.responseText;console.error("Error:\n"+t)},complete:function(){console.log("complete event")}})},login_do:()=>{console.log("login_do");var o={auth_task:"auth_login"};$.each($("#auth_login input"),function(e,l){var t=$(l).attr("data-authfld"),a=$(l).val();o[t]=a}),console.log("req_obj: "),console.log(o);var e=JSON.stringify(o);$.ajax({url:"/.netlify/functions/at_auth",type:"POST",contentType:"application/json",data:e,success:function(o){auth.login_success(o)},error:function(o,e,l){var t;if(console.log("error event"),console.log("jqXHR: "),console.log(o),console.log("textStatus: "),console.log(e),console.log("errorThrown: "),console.log(l),void 0!==o.responseJSON){t=o.responseJSON.statusCode+"\n"+o.responseJSON.error+"\n"+o.responseJSON.message}else t=o.responseText;console.error("Error:\n"+t)},complete:function(){console.log("complete event")}})},login_success:()=>{if(0===$(".valChg").length)location.reload();else{var o=$(".save:disabled");$.each(o,function(){$(this).is(":visible")&&$(this).prop("disabled",!1)}),$("#auth_login_modal").modal("hide")}}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
